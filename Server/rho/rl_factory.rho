new userCh, print(`rho:io:stdout`), ret in {
    contract @{"rl_factory"}(checkBalance, transfer, checkBulletBalance, depositForBullet, checkNECBalance, depositForNEC) = {
        contract checkBalance(addr, ret) = {
            new rl(`rho:registry:lookup`), RevVaultCh, vaultCh, balanceCh in {
                rl!(`rho:rchain:revVault`, *RevVaultCh) |
                for (@(_, RevVault) <- RevVaultCh) {
                    match *addr {
                        revAddress => {
                            print!(("Accessing vault at RevAddress", revAddress)) |
                            @RevVault!("findOrCreate", revAddress, *vaultCh) |
                            for (@(true, vault) <- vaultCh) {
                                print!("Obtained vault, checking balance") |
                                @vault!("balance", *balanceCh) |
                                for (@balance <- balanceCh) {
                                    ret!(balance)
                                }
                            }
                        }
                    }
                }
            }
        }
        |
        contract transfer(from, to, amount) = {
            new rl(`rho:registry:lookup`), RevVaultCh in {
                rl!(`rho:rchain:revVault`, *RevVaultCh) |
                for (@(_, RevVault) <- RevVaultCh) {
                    match (
                        *from,
                        *to,
                        *amount
                    ) {
                        (from, to, amount) => {
                            new vaultCh, targetVaultCh, revVaultkeyCh, deployerId(`rho:rchain:deployerId`) in {
                                @RevVault!("findOrCreate", from, *vaultCh) |
                                @RevVault!("findOrCreate", to, *targetVaultCh) |
                                @RevVault!("deployerAuthKey", *deployerId, *revVaultkeyCh) |
                                for (@(true, vault) <- vaultCh ; key <- revVaultkeyCh ; @(true, _) <- targetVaultCh) {
                                    print!(("Beginning transfer of ", amount, "REV from", from, "to", to)) |
                                    new resultCh in {
                                        @vault!("transfer", to, amount, *key, *resultCh) |
                                        for (@result <- resultCh) {
                                            print!(("Finished transfer of ", amount, "REV to", to, "result was:", result))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        |
        contract checkBulletBalance(addr, ret) = {
            new rl(`rho:registry:lookup`), BulletVaultCh, vaultCh, balanceCh, res in {
                rl!(`rho:id:wnbdfonhkwbgy4g5y5aky8bkob9wzc1zn74b1kx8axr3c7rym39pmw`, *BulletVaultCh) |
                for (@BulletVault <- BulletVaultCh) {
                    match *addr {
                        revAddress => {
                            print!(("Accessing BulletVault at RevAddress", revAddress)) |
                            @BulletVault!("findOrCreate", revAddress, *vaultCh) |
                            // @BulletVault!("test", *res)|
                            // @"BulletVault"!("findOrCreate", *addr, *vaultCh) |
                            for (@(true, vault) <- vaultCh) {
                                print!("Obtained vault, checking balance") |
                                @vault!("balance", *balanceCh) |
                                for (@balance <- balanceCh) {
                                    ret!(balance)
                                }
                            }
                        }
                    }
                }
            }
        }
        |
        contract depositForBullet(amount) = {
            new rl(`rho:registry:lookup`), BulletVaultCh, retCh in {
                rl!(`rho:id:wnbdfonhkwbgy4g5y5aky8bkob9wzc1zn74b1kx8axr3c7rym39pmw`, *BulletVaultCh) |
                for (@BulletVault <- BulletVaultCh) {
                    match *amount{
                        amount => {
                            print!("start deposit")|
                            @BulletVault!("deposit", amount, *retCh) |
                            for (@result <- retCh) {
                                print!(("Finished deposit, pay amount: ", amount, "get bullet amount:", amount * 2 / 100))
                            }
                        }
                    }
                }
            }
        }
        |
        contract checkNECBalance(addr, ret) = {
            new rl(`rho:registry:lookup`), NecVaultCh, vaultCh, balanceCh, res in {
                rl!(`rho:id:c1rgsjz9q7tbbg5jptqd8kpn8jzfn9trmyib166wp5sx7ejdxf1uxf`, *NecVaultCh) |
                for (@NecVault <- NecVaultCh) {
                    match *addr {
                        revAddress => {
                            print!(("Accessing NECVault at RevAddress", revAddress)) |
                            @NecVault!("findOrCreate", revAddress, *vaultCh) |
                            // @NecVault!("test", *res)|
                            // @"NecVault"!("findOrCreate", *addr, *vaultCh) |
                            for (@(true, vault) <- vaultCh) {
                                print!("Obtained vault, checking balance") |
                                @vault!("balance", *balanceCh) |
                                for (@balance <- balanceCh) {
                                    ret!(balance)
                                }
                            }
                        }
                    }
                }
            }
        }
        |
        contract depositForNEC(amount) = {
            new rl(`rho:registry:lookup`), NecVaultCh, retCh in {
                rl!(`rho:id:c1rgsjz9q7tbbg5jptqd8kpn8jzfn9trmyib166wp5sx7ejdxf1uxf`, *NecVaultCh) |
                for (@NecVault <- NecVaultCh) {
                    match *amount{
                        amount => {
                            print!("start deposit")|
                            @NecVault!("deposit", amount, *retCh) |
                            for (@result <- retCh) {
                                print!(("Finished deposit, pay amount: ", amount, "get nec amount:", amount / 100))
                            }
                        }
                    }
                }
            }
        }
    }
}