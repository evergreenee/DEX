new userCh, print(`rho:io:stdout`), ret in {
    contract @{"rl_factory"}(checkBalance, transfer, checkBulletBalance, depositForBullet) = {
        contract checkBalance(addr, ret) = {
            new rl(`rho:registry:lookup`), RevVaultCh, vaultCh, balanceCh in {
                rl!(`rho:rchain:revVault`, *RevVaultCh) |
                for (@(_, RevVault) <- RevVaultCh) {
                    match *addr {
                        revAddress => {
                            print!(("Accessing vault at RevAddress", revAddress)) |
                            @RevVault!("findOrCreate", revAddress, *vaultCh) |
                            for (@(true, vault) <- vaultCh) {
                                print!("Obtained vault, checking balance") |
                                @vault!("balance", *balanceCh) |
                                for (@balance <- balanceCh) {
                                    ret!(balance)
                                }
                            }
                        }
                    }
                }
            }
        }
        |
        contract transfer(from, to, amount) = {
            new rl(`rho:registry:lookup`), RevVaultCh in {
                rl!(`rho:rchain:revVault`, *RevVaultCh) |
                for (@(_, RevVault) <- RevVaultCh) {
                    match (
                        *from,
                        *to,
                        *amount
                    ) {
                        (from, to, amount) => {
                            new vaultCh, targetVaultCh, revVaultkeyCh, deployerId(`rho:rchain:deployerId`) in {
                                @RevVault!("findOrCreate", from, *vaultCh) |
                                @RevVault!("findOrCreate", to, *targetVaultCh) |
                                @RevVault!("deployerAuthKey", *deployerId, *revVaultkeyCh) |
                                for (@(true, vault) <- vaultCh ; key <- revVaultkeyCh ; @(true, _) <- targetVaultCh) {
                                    print!(("Beginning transfer of ", amount, "REV from", from, "to", to)) |
                                    new resultCh in {
                                        @vault!("transfer", to, amount, *key, *resultCh) |
                                        for (@result <- resultCh) {
                                            print!(("Finished transfer of ", amount, "REV to", to, "result was:", result))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        |
        contract checkBulletBalance(addr, ret) = {
            new rl(`rho:registry:lookup`), BulletVaultCh, vaultCh, balanceCh in {
                rl!(`rho:id:auz8oqkczecbiq7jmeeeoyackumqybo4pijfec3rnjccwz6mhtqr9t`, *BulletVaultCh) |
                for (@(_, BulletVault) <- BulletVaultCh) {
                    /*match *addr {
                        revAddress => {*/
                            print!(("Accessing vault at RevAddress", *addr)) |
                            //@BulletVault!("findOrCreate", revAddress, *vaultCh) |
                            @BulletVault!("findOrCreate", *addr, *vaultCh) |
                            for (@(true, vault) <- vaultCh) {
                                print!("Obtained vault, checking balance") |
                                @vault!("balance", *balanceCh) |
                                for (@balance <- balanceCh) {
                                    ret!("Bullet Balance is:",balance)
                                }
                            }
                        /*}
                    }*/
                }
            }
        }
        |
        contract depositForBullet(amount) = {
            new rl(`rho:registry:lookup`), BulletVaultCh, retCh in {
                rl!(`rho:id:auz8oqkczecbiq7jmeeeoyackumqybo4pijfec3rnjccwz6mhtqr9t`, *BulletVaultCh) |
                // for (@(_, BulletVault) <- BulletVaultCh) {
                //     match *amount{
                //         amount => {
                //             @BulletVault!("deposit", amount, *retCh) |
                //             for (@result <- retCh) {
                //                 print!(("Finished deposit, pay amount: ", amount, "result was:", result)) |
                //                 if(result != Nil){
                //                     print!("2")
                //                 }else{
                //                     print!("3")
                //                 }
                //             }
                //             |
                //             print!("1")
                //         }
                //     }
                // }|
                print!("test")
            }
        }
    }
}