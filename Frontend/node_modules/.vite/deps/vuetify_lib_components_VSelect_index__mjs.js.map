{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSelect/VSelect.tsx", "../../vuetify/src/components/VCheckbox/VCheckbox.tsx", "../../vuetify/src/components/VSelectionControl/VSelectionControl.tsx", "../../vuetify/src/components/VSelectionControlGroup/VSelectionControlGroup.tsx", "../../vuetify/src/components/VCheckbox/VCheckboxBtn.tsx", "../../vuetify/src/components/VChip/VChip.tsx", "../../vuetify/src/components/VChipGroup/VChipGroup.tsx", "../../vuetify/src/components/VVirtualScroll/VVirtualScroll.tsx", "../../vuetify/src/components/VVirtualScroll/VVirtualScrollItem.tsx", "../../vuetify/src/composables/virtual.ts", "../../vuetify/src/components/VSelect/useScrolling.ts"],
  "sourcesContent": ["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { makeVTextFieldProps, VTextField } from '@/components/VTextField/VTextField'\nimport { VVirtualScroll } from '@/components/VVirtualScroll'\n\n// Composables\nimport { useScrolling } from './useScrolling'\nimport { useForm } from '@/composables/form'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { IconValue } from '@/composables/icons'\nimport { makeItemsProps, useItems } from '@/composables/list-items'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeTransitionProps } from '@/composables/transition'\n\n// Utilities\nimport { computed, mergeProps, ref, shallowRef, watch } from 'vue'\nimport {\n  genericComponent,\n  IN_BROWSER,\n  matchesSelector,\n  omit,\n  propsFactory,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { Component, PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { ListItem } from '@/composables/list-items'\nimport type { GenericProps } from '@/util'\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = [T] extends [Primitive]\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? readonly Val<T, ReturnObject>[]\n    : Val<T, ReturnObject> | null\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  closeText: {\n    type: String,\n    default: '$vuetify.close',\n  },\n  openText: {\n    type: String,\n    default: '$vuetify.open',\n  },\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown',\n  },\n  menuProps: {\n    type: Object as PropType<VMenu['$props']>,\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n  itemColor: String,\n\n  ...makeItemsProps({ itemChildren: false }),\n}, 'Select')\n\nexport const makeVSelectProps = propsFactory({\n  ...makeSelectProps(),\n  ...omit(makeVTextFieldProps({\n    modelValue: null,\n    role: 'button',\n  }), ['validationValue', 'dirty', 'appendInnerIcon']),\n  ...makeTransitionProps({ transition: { component: VDialogTransition as Component } }),\n}, 'VSelect')\n\nexport const VSelect = genericComponent<new <\n  T extends readonly any[],\n  Item = T extends readonly (infer U)[] ? U : never,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<Item, ReturnObject, Multiple> = Value<Item, ReturnObject, Multiple>\n>(\n  props: {\n    items?: T\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: V | null\n    'onUpdate:modelValue'?: (val: V) => void\n  },\n  slots: Omit<VInputSlots & VFieldSlots, 'default'> & {\n    item: { item: ListItem<Item>, index: number, props: Record<string, unknown> }\n    chip: { item: ListItem<Item>, index: number, props: Record<string, unknown> }\n    selection: { item: ListItem<Item>, index: number }\n    'prepend-item': never\n    'append-item': never\n    'no-data': never\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelect',\n\n  props: makeVSelectProps(),\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const vMenuRef = ref<VMenu>()\n    const vVirtualScrollRef = ref<VVirtualScroll>()\n    const _menu = useProxiedModel(props, 'menu')\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren) return\n        _menu.value = v\n      },\n    })\n    const { items, transformIn, transformOut } = useItems(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(v === null ? [null] : wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const form = useForm()\n    const selectedValues = computed(() => model.value.map(selection => selection.value))\n    const isFocused = shallowRef(false)\n    const label = computed(() => menu.value ? props.closeText : props.openText)\n\n    let keyboardLookupPrefix = ''\n    let keyboardLookupLastTime: number\n\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return items.value.filter(item => !model.value.some(s => s === item))\n      }\n      return items.value\n    })\n\n    const menuDisabled = computed(() => (\n      (props.hideNoData && !items.value.length) ||\n      props.readonly || form?.isReadonly.value\n    ))\n\n    const listRef = ref<VList>()\n    const { onListScroll, onListKeydown } = useScrolling(listRef, vTextFieldRef)\n    function onClear (e: MouseEvent) {\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onMousedownControl () {\n      if (menuDisabled.value) return\n\n      menu.value = !menu.value\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (!e.key || props.readonly || form?.isReadonly.value) return\n\n      if (['Enter', ' ', 'ArrowDown', 'ArrowUp', 'Home', 'End'].includes(e.key)) {\n        e.preventDefault()\n      }\n\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (e.key === 'Home') {\n        listRef.value?.focus('first')\n      } else if (e.key === 'End') {\n        listRef.value?.focus('last')\n      }\n\n      // html select hotkeys\n      const KEYBOARD_LOOKUP_THRESHOLD = 1000 // milliseconds\n\n      function checkPrintable (e: KeyboardEvent) {\n        const isPrintableChar = e.key.length === 1\n        const noModifier = !e.ctrlKey && !e.metaKey && !e.altKey\n        return isPrintableChar && noModifier\n      }\n\n      if (props.multiple || !checkPrintable(e)) return\n\n      const now = performance.now()\n      if (now - keyboardLookupLastTime > KEYBOARD_LOOKUP_THRESHOLD) {\n        keyboardLookupPrefix = ''\n      }\n      keyboardLookupPrefix += e.key.toLowerCase()\n      keyboardLookupLastTime = now\n\n      const item = items.value.find(item => item.title.toLowerCase().startsWith(keyboardLookupPrefix))\n      if (item !== undefined) {\n        model.value = [item]\n      }\n    }\n    function select (item: ListItem) {\n      if (props.multiple) {\n        const index = model.value.findIndex(selection => props.valueComparator(selection.value, item.value))\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n        menu.value = false\n      }\n    }\n    function onBlur (e: FocusEvent) {\n      if (!listRef.value?.$el.contains(e.relatedTarget as HTMLElement)) {\n        menu.value = false\n      }\n    }\n    function onAfterLeave () {\n      if (isFocused.value) {\n        vTextFieldRef.value?.focus()\n      }\n    }\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n    }\n    function onModelUpdate (v: any) {\n      if (v == null) model.value = []\n      else if (matchesSelector(vTextFieldRef.value, ':autofill') || matchesSelector(vTextFieldRef.value, ':-webkit-autofill')) {\n        const item = items.value.find(item => item.title === v)\n        if (item) {\n          select(item)\n        }\n      } else if (vTextFieldRef.value) {\n        vTextFieldRef.value.value = ''\n      }\n    }\n\n    watch(menu, () => {\n      if (!props.hideSelected && menu.value && model.value.length) {\n        const index = displayItems.value.findIndex(\n          item => model.value.some(s => props.valueComparator(s.value, item.value))\n        )\n        IN_BROWSER && window.requestAnimationFrame(() => {\n          index >= 0 && vVirtualScrollRef.value?.scrollToIndex(index)\n        })\n      }\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n      const hasList = !!(\n        (!props.hideNoData || displayItems.value.length) ||\n        slots['prepend-item'] ||\n        slots['append-item'] ||\n        slots['no-data']\n      )\n      const isDirty = model.value.length > 0\n      const [textFieldProps] = VTextField.filterProps(props)\n\n      const placeholder = isDirty || (\n        !isFocused.value &&\n        props.label &&\n        !props.persistentPlaceholder\n      ) ? undefined : props.placeholder\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          { ...textFieldProps }\n          modelValue={ model.value.map(v => v.props.value).join(', ') }\n          onUpdate:modelValue={ onModelUpdate }\n          v-model:focused={ isFocused.value }\n          validationValue={ model.externalValue }\n          counterValue={ model.value.length }\n          dirty={ isDirty }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n              'v-select--selected': model.value.length,\n              'v-select--selection-slot': !!slots.selection,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          inputmode=\"none\"\n          placeholder={ placeholder }\n          onClick:clear={ onClear }\n          onMousedown:control={ onMousedownControl }\n          onBlur={ onBlur }\n          onKeydown={ onKeydown }\n          aria-label={ t(label.value) }\n          title={ t(label.value) }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  ref={ vMenuRef }\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-select__content\"\n                  disabled={ menuDisabled.value }\n                  eager={ props.eager }\n                  maxHeight={ 310 }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  onAfterLeave={ onAfterLeave }\n                  { ...props.menuProps }\n                >\n                  { hasList && (\n                    <VList\n                      ref={ listRef }\n                      selected={ selectedValues.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                      onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                      onKeydown={ onListKeydown }\n                      onFocusin={ onFocusin }\n                      onScrollPassive={ onListScroll }\n                      tabindex=\"-1\"\n                      color={ props.itemColor ?? props.color }\n                    >\n                      { slots['prepend-item']?.() }\n\n                      { !displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                        <VListItem title={ t(props.noDataText) } />\n                      ))}\n\n                      <VVirtualScroll ref={ vVirtualScrollRef } renderless items={ displayItems.value }>\n                        { ({ item, index, itemRef }) => {\n                          const itemProps = mergeProps(item.props, {\n                            ref: itemRef,\n                            key: index,\n                            onClick: () => select(item),\n                          })\n\n                          return slots.item?.({\n                            item,\n                            index,\n                            props: itemProps,\n                          }) ?? (\n                            <VListItem { ...itemProps }>\n                              {{\n                                prepend: ({ isSelected }) => (\n                                  <>\n                                    { props.multiple && !props.hideSelected ? (\n                                      <VCheckboxBtn\n                                        key={ item.value }\n                                        modelValue={ isSelected }\n                                        ripple={ false }\n                                        tabindex=\"-1\"\n                                      />\n                                    ) : undefined }\n\n                                    { item.props.prependIcon && (\n                                      <VIcon icon={ item.props.prependIcon } />\n                                    )}\n                                  </>\n                                ),\n                              }}\n                            </VListItem>\n                          )\n                        }}\n                      </VVirtualScroll>\n\n                      { slots['append-item']?.() }\n                    </VList>\n                  )}\n                </VMenu>\n\n                { model.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    onMousedown (e: MouseEvent) {\n                      e.preventDefault()\n                      e.stopPropagation()\n                    },\n                    modelValue: true,\n                    'onUpdate:modelValue': undefined,\n                  }\n\n                  return (\n                    <div key={ item.value } class=\"v-select__selection\">\n                      { hasChips ? (\n                        !slots.chip ? (\n                          <VChip\n                            key=\"chip\"\n                            closable={ props.closableChips }\n                            size=\"small\"\n                            text={ item.title }\n                            disabled={ item.props.disabled }\n                            { ...slotProps }\n                          />\n                        ) : (\n                          <VDefaultsProvider\n                            key=\"chip-defaults\"\n                            defaults={{\n                              VChip: {\n                                closable: props.closableChips,\n                                size: 'small',\n                                text: item.title,\n                              },\n                            }}\n                          >\n                            { slots.chip?.({ item, index, props: slotProps }) }\n                          </VDefaultsProvider>\n                        )\n                      ) : (\n                        slots.selection?.({ item, index }) ?? (\n                          <span class=\"v-select__selection-text\">\n                            { item.title }\n                            { props.multiple && (index < model.value.length - 1) && (\n                              <span class=\"v-select__selection-comma\">,</span>\n                            )}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  )\n                })}\n              </>\n            ),\n            'append-inner': (...args) => (\n              <>\n                { slots['append-inner']?.(...args) }\n                { props.menuIcon ? (\n                  <VIcon\n                    class=\"v-select__menu-icon\"\n                    icon={ props.menuIcon }\n                  />\n                ) : undefined }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      isFocused,\n      menu,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n", "// Styles\nimport './VCheckbox.sass'\n\n// Components\nimport { makeVCheckboxBtnProps, VCheckboxBtn } from './VCheckboxBtn'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '../VSelectionControl/VSelectionControl'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport type VCheckboxSlots = Omit<VInputSlots, 'default'> & VSelectionControlSlots\n\nexport const makeVCheckboxProps = propsFactory({\n  ...makeVInputProps(),\n  ...omit(makeVCheckboxBtnProps(), ['inline']),\n}, 'VCheckbox')\n\nexport const VCheckbox = genericComponent<VCheckboxSlots>()({\n  name: 'VCheckbox',\n\n  inheritAttrs: false,\n\n  props: makeVCheckboxProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n    'update:focused': (focused: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `checkbox-${uid}`)\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = VInput.filterProps(props)\n      const [checkboxProps, _2] = VCheckboxBtn.filterProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-checkbox',\n            props.class,\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n          focused={ isFocused.value }\n          style={ props.style }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n            }) => (\n              <VCheckboxBtn\n                { ...checkboxProps }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                { ...controlAttrs }\n                v-model={ model.value }\n                onFocus={ focus }\n                onBlur={ blur }\n                v-slots={ slots }\n              />\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckbox = InstanceType<typeof VCheckbox>\n", "// Styles\nimport './VSelectionControl.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VLabel } from '@/components/VLabel'\nimport { makeSelectionControlGroupProps, VSelectionControlGroupSymbol } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\n\n// Composables\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useDensity } from '@/composables/density'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject, nextTick, ref, shallowRef } from 'vue'\nimport {\n  filterInputAttrs,\n  genericComponent,\n  getUid,\n  matchesSelector,\n  propsFactory,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { CSSProperties, ExtractPropTypes, Ref, VNode, WritableComputedRef } from 'vue'\nimport type { IconValue } from '@/composables/icons'\nimport type { GenericProps } from '@/util'\n\nexport type SelectionControlSlot = {\n  model: WritableComputedRef<any>\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n  inputNode: VNode\n  icon: IconValue | undefined\n  props: {\n    onBlur: (e: Event) => void\n    onFocus: (e: FocusEvent) => void\n    id: string\n  }\n}\n\nexport type VSelectionControlSlots = {\n  default: {\n    backgroundColorClasses: Ref<string[]>\n    backgroundColorStyles: Ref<CSSProperties>\n  }\n  label: { label: string | undefined, props: Record<string, unknown> }\n  input: SelectionControlSlot\n}\n\nexport const makeVSelectionControlProps = propsFactory({\n  label: String,\n  trueValue: null,\n  falseValue: null,\n  value: null,\n\n  ...makeComponentProps(),\n  ...makeSelectionControlGroupProps(),\n}, 'VSelectionControl')\n\nexport function useSelectionControl (\n  props: ExtractPropTypes<ReturnType<typeof makeVSelectionControlProps>> & {\n    'onUpdate:modelValue': ((val: any) => void) | undefined\n  }\n) {\n  const group = inject(VSelectionControlGroupSymbol, undefined)\n  const { densityClasses } = useDensity(props)\n  const modelValue = useProxiedModel(props, 'modelValue')\n  const trueValue = computed(() => (\n    props.trueValue !== undefined ? props.trueValue\n    : props.value !== undefined ? props.value\n    : true\n  ))\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false)\n  const isMultiple = computed(() => (\n    !!props.multiple ||\n    (props.multiple == null && Array.isArray(modelValue.value))\n  ))\n  const model = computed({\n    get () {\n      const val = group ? group.modelValue.value : modelValue.value\n\n      return isMultiple.value\n        ? val.some((v: any) => props.valueComparator(v, trueValue.value))\n        : props.valueComparator(val, trueValue.value)\n    },\n    set (val: boolean) {\n      if (props.readonly) return\n\n      const currentValue = val ? trueValue.value : falseValue.value\n\n      let newVal = currentValue\n\n      if (isMultiple.value) {\n        newVal = val\n          ? [...wrapInArray(modelValue.value), currentValue]\n          : wrapInArray(modelValue.value).filter((item: any) => !props.valueComparator(item, trueValue.value))\n      }\n\n      if (group) {\n        group.modelValue.value = newVal\n      } else {\n        modelValue.value = newVal\n      }\n    },\n  })\n  const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n    return (\n      model.value &&\n      !props.error &&\n      !props.disabled\n    ) ? props.color : undefined\n  }))\n  const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(computed(() => {\n    return (\n      model.value &&\n      !props.error &&\n      !props.disabled\n    ) ? props.color : undefined\n  }))\n  const icon = computed(() => model.value ? props.trueIcon : props.falseIcon)\n\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    backgroundColorClasses,\n    backgroundColorStyles,\n    icon,\n  }\n}\n\nexport const VSelectionControl = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  },\n  slots: VSelectionControlSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelectionControl',\n\n  directives: { Ripple },\n\n  inheritAttrs: false,\n\n  props: makeVSelectionControlProps(),\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const {\n      group,\n      densityClasses,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      backgroundColorClasses,\n      backgroundColorStyles,\n      trueValue,\n    } = useSelectionControl(props)\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const isFocused = shallowRef(false)\n    const isFocusVisible = shallowRef(false)\n    const input = ref<HTMLInputElement>()\n\n    group?.onForceUpdate(() => {\n      if (input.value) {\n        input.value.checked = model.value\n      }\n    })\n\n    function onFocus (e: FocusEvent) {\n      isFocused.value = true\n      if (matchesSelector(e.target as HTMLElement, ':focus-visible') !== false) {\n        isFocusVisible.value = true\n      }\n    }\n\n    function onBlur () {\n      isFocused.value = false\n      isFocusVisible.value = false\n    }\n\n    function onInput (e: Event) {\n      if (props.readonly && group) {\n        nextTick(() => group.forceUpdate())\n      }\n      model.value = (e.target as HTMLInputElement).checked\n    }\n\n    useRender(() => {\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      const inputNode = (\n        <input\n          ref={ input }\n          checked={ model.value }\n          disabled={ !!(props.readonly || props.disabled) }\n          id={ id.value }\n          onBlur={ onBlur }\n          onFocus={ onFocus }\n          onInput={ onInput }\n          aria-disabled={ !!(props.readonly || props.disabled) }\n          type={ props.type }\n          value={ trueValue.value }\n          name={ props.name }\n          aria-checked={ props.type === 'checkbox' ? model.value : undefined }\n          { ...inputAttrs }\n        />\n      )\n\n      return (\n        <div\n          class={[\n            'v-selection-control',\n            {\n              'v-selection-control--dirty': model.value,\n              'v-selection-control--disabled': props.disabled,\n              'v-selection-control--error': props.error,\n              'v-selection-control--focused': isFocused.value,\n              'v-selection-control--focus-visible': isFocusVisible.value,\n              'v-selection-control--inline': props.inline,\n            },\n            densityClasses.value,\n            props.class,\n          ]}\n          { ...rootAttrs }\n          style={ props.style }\n        >\n          <div\n            class={[\n              'v-selection-control__wrapper',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n          >\n            { slots.default?.({\n              backgroundColorClasses,\n              backgroundColorStyles,\n            })}\n\n            <div\n              class={[\n                'v-selection-control__input',\n              ]}\n              v-ripple={ props.ripple && [\n                !props.disabled && !props.readonly,\n                null,\n                ['center', 'circle'],\n              ]}\n            >\n              { slots.input?.({\n                model,\n                textColorClasses,\n                textColorStyles,\n                backgroundColorClasses,\n                backgroundColorStyles,\n                inputNode,\n                icon: icon.value,\n                props: {\n                  onFocus,\n                  onBlur,\n                  id: id.value,\n                },\n              } satisfies SelectionControlSlot) ?? (\n                <>\n                  { icon.value && <VIcon key=\"icon\" icon={ icon.value } /> }\n\n                  { inputNode }\n                </>\n              )}\n            </div>\n          </div>\n\n          { label && (\n            <VLabel for={ id.value } clickable onClick={ (e: Event) => e.stopPropagation() }>\n              { label }\n            </VLabel>\n          )}\n        </div>\n      )\n    })\n\n    return {\n      isFocused,\n      input,\n    }\n  },\n})\n\nexport type VSelectionControl = InstanceType<typeof VSelectionControl>\n", "// Styles\nimport './VSelectionControlGroup.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps } from '@/composables/density'\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeThemeProps } from '@/composables/theme'\n\n// Utilities\nimport { computed, onScopeDispose, provide, toRef } from 'vue'\nimport { deepEqual, genericComponent, getUid, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\n\nexport interface VSelectionGroupContext {\n  modelValue: Ref<any>\n  forceUpdate: () => void\n  onForceUpdate: (fn: () => void) => void\n}\n\nexport const VSelectionControlGroupSymbol: InjectionKey<VSelectionGroupContext> = Symbol.for('vuetify:selection-control-group')\n\nexport const makeSelectionControlGroupProps = propsFactory({\n  color: String,\n  disabled: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  defaultsTarget: String,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: Boolean,\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeThemeProps(),\n}, 'SelectionControlGroup')\n\nexport const makeVSelectionControlGroupProps = propsFactory({\n  ...makeSelectionControlGroupProps({\n    defaultsTarget: 'VSelectionControl',\n  }),\n}, 'VSelectionControlGroup')\n\nexport const VSelectionControlGroup = genericComponent()({\n  name: 'VSelectionControlGroup',\n\n  props: makeVSelectionControlGroupProps(),\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const modelValue = useProxiedModel(props, 'modelValue')\n    const uid = getUid()\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`)\n    const name = computed(() => props.name || id.value)\n\n    const updateHandlers = new Set<() => void>()\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn())\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb)\n        onScopeDispose(() => {\n          updateHandlers.delete(cb)\n        })\n      },\n    })\n\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || (props.multiple == null && Array.isArray(modelValue.value))),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator'),\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-selection-control-group',\n          { 'v-selection-control-group--inline': props.inline },\n          props.class,\n        ]}\n        style={ props.style }\n        role={ props.type === 'radio' ? 'radiogroup' : undefined }\n      >\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VSelectionControlGroup = InstanceType<typeof VSelectionControlGroup>\n", "// Components\nimport { makeVSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\n\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate',\n  },\n\n  ...makeVSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn',\n  }),\n}, 'VCheckboxBtn')\n\nexport const VCheckboxBtn = genericComponent<VSelectionControlSlots>()({\n  name: 'VCheckboxBtn',\n\n  props: makeVCheckboxBtnProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n\n    function onChange (v: any) {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    const falseIcon = computed(() => {\n      return indeterminate.value\n        ? props.indeterminateIcon\n        : props.falseIcon\n    })\n\n    const trueIcon = computed(() => {\n      return indeterminate.value\n        ? props.indeterminateIcon\n        : props.trueIcon\n    })\n\n    useRender(() => {\n      const controlProps = omit(VSelectionControl.filterProps(props)[0], ['modelValue'])\n      return (\n        <VSelectionControl\n          { ...controlProps }\n          v-model={ model.value }\n        class={[\n          'v-checkbox-btn',\n          props.class,\n        ]}\n        style={ props.style }\n          type=\"checkbox\"\n          onUpdate:modelValue={ onChange }\n          falseIcon={ falseIcon.value }\n          trueIcon={ trueIcon.value }\n        aria-checked={ indeterminate.value ? 'mixed' : undefined }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckboxBtn = InstanceType<typeof VCheckboxBtn>\n", "/* eslint-disable complexity */\n// Styles\nimport './VChip.sass'\n\n// Components\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VAvatar } from '@/components/VAvatar'\nimport { VChipGroupSymbol } from '@/components/VChipGroup/VChipGroup'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { IconValue } from '@/composables/icons'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed } from 'vue'\nimport { EventProp, genericComponent, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\n\nexport type VChipSlots = {\n  default: {\n    isSelected: boolean | undefined\n    selectedClass: boolean | (string | undefined)[] | undefined\n    select: ((value: boolean) => void) | undefined\n    toggle: (() => void) | undefined\n    value: unknown\n    disabled: boolean\n  }\n  label: never\n  prepend: never\n  append: never\n  close: never\n  filter: never\n}\n\nexport const makeVChipProps = propsFactory({\n  activeClass: String,\n  appendAvatar: String,\n  appendIcon: IconValue,\n  closable: Boolean,\n  closeIcon: {\n    type: IconValue,\n    default: '$delete',\n  },\n  closeLabel: {\n    type: String,\n    default: '$vuetify.close',\n  },\n  draggable: Boolean,\n  filter: Boolean,\n  filterIcon: {\n    type: String,\n    default: '$complete',\n  },\n  label: Boolean,\n  link: {\n    type: Boolean,\n    default: undefined,\n  },\n  pill: Boolean,\n  prependAvatar: String,\n  prependIcon: IconValue,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: true,\n  },\n  text: String,\n  modelValue: {\n    type: Boolean,\n    default: true,\n  },\n\n  onClick: EventProp<[MouseEvent]>(),\n  onClickOnce: EventProp<[MouseEvent]>(),\n\n  ...makeBorderProps(),\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeElevationProps(),\n  ...makeGroupItemProps(),\n  ...makeRoundedProps(),\n  ...makeRouterProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'span' }),\n  ...makeThemeProps(),\n  ...makeVariantProps({ variant: 'tonal' } as const),\n}, 'VChip')\n\nexport const VChip = genericComponent<VChipSlots>()({\n  name: 'VChip',\n\n  directives: { Ripple },\n\n  props: makeVChipProps(),\n\n  emits: {\n    'click:close': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n    'group:selected': (val: { value: boolean }) => true,\n    click: (e: MouseEvent | KeyboardEvent) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { t } = useLocale()\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses } = useSize(props)\n    const { themeClasses } = provideTheme(props)\n\n    const isActive = useProxiedModel(props, 'modelValue')\n    const group = useGroupItem(props, VChipGroupSymbol, false)\n    const link = useLink(props, attrs)\n    const isLink = computed(() => props.link !== false && link.isLink.value)\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (!!group || props.link || link.isClickable.value)\n    )\n    const closeProps = computed(() => ({\n      'aria-label': t(props.closeLabel),\n      onClick (e: MouseEvent) {\n        e.stopPropagation()\n\n        isActive.value = false\n\n        emit('click:close', e)\n      },\n    }))\n\n    function onClick (e: MouseEvent) {\n      emit('click', e)\n\n      if (!isClickable.value) return\n\n      link.navigate?.(e)\n      group?.toggle()\n    }\n\n    function onKeyDown (e: KeyboardEvent) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault()\n        onClick(e as any as MouseEvent)\n      }\n    }\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasAppendMedia = !!(props.appendIcon || props.appendAvatar)\n      const hasAppend = !!(hasAppendMedia || slots.append)\n      const hasClose = !!(slots.close || props.closable)\n      const hasFilter = !!(slots.filter || props.filter) && group\n      const hasPrependMedia = !!(props.prependIcon || props.prependAvatar)\n      const hasPrepend = !!(hasPrependMedia || slots.prepend)\n      const hasColor = !group || group.isSelected.value\n\n      return isActive.value && (\n        <Tag\n          class={[\n            'v-chip',\n            {\n              'v-chip--disabled': props.disabled,\n              'v-chip--label': props.label,\n              'v-chip--link': isClickable.value,\n              'v-chip--filter': hasFilter,\n              'v-chip--pill': props.pill,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            hasColor ? colorClasses.value : undefined,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            sizeClasses.value,\n            variantClasses.value,\n            group?.selectedClass.value,\n            props.class,\n          ]}\n          style={[\n            hasColor ? colorStyles.value : undefined,\n            props.style,\n          ]}\n          disabled={ props.disabled || undefined }\n          draggable={ props.draggable }\n          href={ link.href.value }\n          tabindex={ isClickable.value ? 0 : undefined }\n          onClick={ onClick }\n          onKeydown={ isClickable.value && !isLink.value && onKeyDown }\n          v-ripple={[isClickable.value && props.ripple, null]}\n        >\n          { genOverlays(isClickable.value, 'v-chip') }\n\n          { hasFilter && (\n            <VExpandXTransition key=\"filter\">\n              <div\n                class=\"v-chip__filter\"\n                v-show={ group.isSelected.value }\n              >\n                { !slots.filter ? (\n                  <VIcon\n                    key=\"filter-icon\"\n                    icon={ props.filterIcon }\n                  />\n                ) : (\n                  <VDefaultsProvider\n                    key=\"filter-defaults\"\n                    disabled={ !props.filterIcon }\n                    defaults={{\n                      VIcon: { icon: props.filterIcon },\n                    }}\n                    v-slots:default={ slots.filter }\n                  />\n                )}\n              </div>\n            </VExpandXTransition>\n          )}\n\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-chip__prepend\">\n              { !slots.prepend ? (\n                <>\n                  { props.prependIcon && (\n                    <VIcon\n                      key=\"prepend-icon\"\n                      icon={ props.prependIcon }\n                      start\n                    />\n                  )}\n\n                  { props.prependAvatar && (\n                    <VAvatar\n                      key=\"prepend-avatar\"\n                      image={ props.prependAvatar }\n                      start\n                    />\n                  )}\n                </>\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !hasPrependMedia }\n                  defaults={{\n                    VAvatar: {\n                      image: props.prependAvatar,\n                      start: true,\n                    },\n                    VIcon: {\n                      icon: props.prependIcon,\n                      start: true,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          <div class=\"v-chip__content\">\n            { slots.default?.({\n              isSelected: group?.isSelected.value,\n              selectedClass: group?.selectedClass.value,\n              select: group?.select,\n              toggle: group?.toggle,\n              value: group?.value.value,\n              disabled: props.disabled,\n            }) ?? props.text }\n          </div>\n\n          { hasAppend && (\n            <div key=\"append\" class=\"v-chip__append\">\n              { !slots.append ? (\n                <>\n                  { props.appendIcon && (\n                    <VIcon\n                      key=\"append-icon\"\n                      end\n                      icon={ props.appendIcon }\n                    />\n                  )}\n\n                  { props.appendAvatar && (\n                    <VAvatar\n                      key=\"append-avatar\"\n                      end\n                      image={ props.appendAvatar }\n                    />\n                  )}\n                </>\n              ) : (\n                <VDefaultsProvider\n                  key=\"append-defaults\"\n                  disabled={ !hasAppendMedia }\n                  defaults={{\n                    VAvatar: {\n                      end: true,\n                      image: props.appendAvatar,\n                    },\n                    VIcon: {\n                      end: true,\n                      icon: props.appendIcon,\n                    },\n                  }}\n                  v-slots:default={ slots.append }\n                />\n              )}\n            </div>\n          )}\n\n          { hasClose && (\n            <div\n              key=\"close\"\n              class=\"v-chip__close\"\n              { ...closeProps.value }\n            >\n              { !slots.close ? (\n                <VIcon\n                  key=\"close-icon\"\n                  icon={ props.closeIcon }\n                  size=\"x-small\"\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"close-defaults\"\n                  defaults={{\n                    VIcon: {\n                      icon: props.closeIcon,\n                      size: 'x-small',\n                    },\n                  }}\n                  v-slots:default={ slots.close }\n                />\n              )}\n            </div>\n          )}\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VChip = InstanceType<typeof VChip>\n", "// Styles\nimport './VChipGroup.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { deepEqual, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const makeVChipGroupProps = propsFactory({\n  column: Boolean,\n  filter: Boolean,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeComponentProps(),\n  ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeVariantProps({ variant: 'tonal' } as const),\n}, 'VChipGroup')\n\ntype VChipGroupSlots = {\n  default: {\n    isSelected: (id: number) => boolean\n    select: (id: number, value: boolean) => void\n    next: () => void\n    prev: () => void\n    selected: readonly number[]\n  }\n}\n\nexport const VChipGroup = genericComponent<VChipGroupSlots>()({\n  name: 'VChipGroup',\n\n  props: makeVChipGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-chip-group',\n          {\n            'v-chip-group--column': props.column,\n          },\n          themeClasses.value,\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        })}\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n", "// Styles\nimport './VVirtualScroll.sass'\n\n// Components\nimport { VVirtualScrollItem } from './VVirtualScrollItem'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { useToggleScope } from '@/composables/toggleScope'\nimport { makeVirtualProps, useVirtual } from '@/composables/virtual'\n\n// Utilities\nimport { onMounted, onScopeDispose, toRef } from 'vue'\nimport {\n  convertToUnit,\n  genericComponent,\n  getCurrentInstance,\n  getScrollParent,\n  propsFactory,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport interface VVirtualScrollSlot<T> {\n  item: T\n  index: number\n}\n\nexport const makeVVirtualScrollProps = propsFactory({\n  items: {\n    type: Array as PropType<readonly unknown[]>,\n    default: () => ([]),\n  },\n  renderless: Boolean,\n\n  ...makeVirtualProps(),\n  ...makeComponentProps(),\n  ...makeDimensionProps(),\n}, 'VVirtualScroll')\n\nexport const VVirtualScroll = genericComponent<new <T, Renderless extends boolean = false>(\n  props: {\n    items?: readonly T[]\n    renderless?: Renderless\n  },\n  slots: {\n    default: VVirtualScrollSlot<T> & (Renderless extends true ? {\n      itemRef: Ref<HTMLElement | undefined>\n    } : {})\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VVirtualScroll',\n\n  props: makeVVirtualScrollProps(),\n\n  setup (props, { slots }) {\n    const vm = getCurrentInstance('VVirtualScroll')\n    const { dimensionStyles } = useDimension(props)\n    const {\n      containerRef,\n      handleScroll,\n      handleItemResize,\n      scrollToIndex,\n      paddingTop,\n      paddingBottom,\n      computedItems,\n    } = useVirtual(props, toRef(props, 'items'))\n\n    useToggleScope(() => props.renderless, () => {\n      onMounted(() => {\n        containerRef.value = getScrollParent(vm.vnode.el as HTMLElement, true)\n        containerRef.value?.addEventListener('scroll', handleScroll)\n      })\n      onScopeDispose(() => {\n        containerRef.value?.removeEventListener('scroll', handleScroll)\n      })\n    })\n\n    useRender(() => {\n      const children = computedItems.value.map(item => (\n        <VVirtualScrollItem\n          key={ item.index }\n          renderless={ props.renderless }\n          onUpdate:height={ height => handleItemResize(item.index, height) }\n        >\n          { slotProps => slots.default?.({ item: item.raw, index: item.index, ...slotProps }) }\n        </VVirtualScrollItem>\n      ))\n\n      return props.renderless ? (\n        <>\n          <div class=\"v-virtual-scroll__spacer\" style={{ paddingTop: convertToUnit(paddingTop.value) }} />\n          { children }\n          <div class=\"v-virtual-scroll__spacer\" style={{ paddingBottom: convertToUnit(paddingBottom.value) }} />\n        </>\n      ) : (\n        <div\n          ref={ containerRef }\n          class={[\n            'v-virtual-scroll',\n            props.class,\n          ]}\n          onScroll={ handleScroll }\n          style={[\n            dimensionStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            class=\"v-virtual-scroll__container\"\n            style={{\n              paddingTop: convertToUnit(paddingTop.value),\n              paddingBottom: convertToUnit(paddingBottom.value),\n            }}\n          >\n            { children }\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      scrollToIndex,\n    }\n  },\n})\n\nexport type VVirtualScroll = InstanceType<typeof VVirtualScroll>\n", "// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { watch } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport const makeVVirtualScrollItemProps = propsFactory({\n  renderless: Boolean,\n\n  ...makeComponentProps(),\n}, 'VVirtualScrollItem')\n\nexport const VVirtualScrollItem = genericComponent<new <Renderless extends boolean = false>(\n  props: {\n    renderless?: Renderless\n  },\n  slots: {\n    default: Renderless extends true ? {\n      itemRef: Ref<HTMLElement | undefined>\n    } : never\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VVirtualScrollItem',\n\n  inheritAttrs: false,\n\n  props: makeVVirtualScrollItemProps(),\n\n  emits: {\n    'update:height': (height: number) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { resizeRef, contentRect } = useResizeObserver(undefined, 'border')\n\n    watch(() => contentRect.value?.height, height => {\n      if (height != null) emit('update:height', height)\n    })\n\n    useRender(() => props.renderless ? (\n      <>\n        { slots.default?.({ itemRef: resizeRef }) }\n      </>\n    ) : (\n      <div\n        ref={ resizeRef }\n        class={[\n          'v-virtual-scroll__item',\n          props.class,\n        ]}\n        style={ props.style }\n        { ...attrs }\n      >\n        { (slots.default as any)?.() }\n      </div>\n    ))\n  },\n})\n", "// Composables\nimport { useDisplay } from '@/composables/display'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { computed, ref, shallowRef, watch, watchEffect } from 'vue'\nimport {\n  clamp,\n  createRange,\n  propsFactory,\n} from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nconst UP = -1\nconst DOWN = 1\n\ntype VirtualProps = {\n  itemHeight?: number | string\n}\n\nexport const makeVirtualProps = propsFactory({\n  itemHeight: {\n    type: [Number, String],\n    default: 48,\n  },\n}, 'virtual')\n\nexport function useVirtual <T> (props: VirtualProps, items: Ref<readonly T[]>, offset?: Ref<number>) {\n  const first = shallowRef(0)\n  const baseItemHeight = shallowRef(props.itemHeight)\n  const itemHeight = computed({\n    get: () => parseInt(baseItemHeight.value ?? 0, 10),\n    set (val) {\n      baseItemHeight.value = val\n    },\n  })\n  const containerRef = ref<HTMLElement>()\n  const { resizeRef, contentRect } = useResizeObserver()\n  watchEffect(() => {\n    resizeRef.value = containerRef.value\n  })\n  const display = useDisplay()\n\n  const sizeMap = new Map<any, number>()\n  let sizes = Array.from<number | null>({ length: items.value.length })\n  const visibleItems = computed(() => {\n    const height = (\n      !contentRect.value || containerRef.value === document.documentElement\n        ? display.height.value\n        : contentRect.value.height\n    ) - (offset?.value ?? 0)\n    return Math.ceil((height / itemHeight.value) * 1.7 + 1)\n  })\n\n  function handleItemResize (index: number, height: number) {\n    itemHeight.value = Math.max(itemHeight.value, height)\n    sizes[index] = height\n    sizeMap.set(items.value[index], height)\n  }\n\n  function calculateOffset (index: number) {\n    return sizes.slice(0, index)\n      .reduce((acc, val) => acc! + (val || itemHeight.value), 0)!\n  }\n\n  function calculateMidPointIndex (scrollTop: number) {\n    const end = items.value.length\n\n    let middle = 0\n    let middleOffset = 0\n    while (middleOffset < scrollTop && middle < end) {\n      middleOffset += sizes[middle++] || itemHeight.value\n    }\n\n    return middle - 1\n  }\n\n  let lastScrollTop = 0\n  function handleScroll () {\n    if (!containerRef.value || !contentRect.value) return\n\n    const height = contentRect.value.height - 56\n    const scrollTop = containerRef.value.scrollTop\n    const direction = scrollTop < lastScrollTop ? UP : DOWN\n\n    const midPointIndex = calculateMidPointIndex(scrollTop + height / 2)\n    const buffer = Math.round(visibleItems.value / 3)\n    const firstIndex = midPointIndex - buffer\n    const lastIndex = first.value + (buffer * 2) - 1\n    if (direction === UP && midPointIndex <= lastIndex) {\n      first.value = clamp(firstIndex, 0, items.value.length)\n    } else if (direction === DOWN && midPointIndex >= lastIndex) {\n      first.value = clamp(firstIndex, 0, items.value.length - visibleItems.value)\n    }\n\n    lastScrollTop = scrollTop\n  }\n\n  function scrollToIndex (index: number) {\n    if (!containerRef.value) return\n\n    const offset = calculateOffset(index)\n    containerRef.value.scrollTop = offset\n  }\n\n  const last = computed(() => Math.min(items.value.length, first.value + visibleItems.value))\n  const computedItems = computed(() => {\n    return items.value.slice(first.value, last.value).map((item, index) => ({\n      raw: item,\n      index: index + first.value,\n    }))\n  })\n  const paddingTop = computed(() => calculateOffset(first.value))\n  const paddingBottom = computed(() => calculateOffset(items.value.length) - calculateOffset(last.value))\n\n  watch(() => items.value.length, () => {\n    sizes = createRange(items.value.length).map(() => itemHeight.value)\n    sizeMap.forEach((height, item) => {\n      const index = items.value.indexOf(item)\n      if (index === -1) {\n        sizeMap.delete(item)\n      } else {\n        sizes[index] = height\n      }\n    })\n  })\n\n  return {\n    containerRef,\n    computedItems,\n    itemHeight,\n    paddingTop,\n    paddingBottom,\n    scrollToIndex,\n    handleScroll,\n    handleItemResize,\n  }\n}\n", "// Utilities\nimport { shallowRef, watch } from 'vue'\n\n// Types\nimport type { Ref } from 'vue'\nimport type { VList } from '@/components/VList'\nimport type { VTextField } from '@/components/VTextField'\n\nexport function useScrolling (listRef: Ref<VList | undefined>, textFieldRef: Ref<VTextField | undefined>) {\n  const isScrolling = shallowRef(false)\n  let scrollTimeout: number\n  function onListScroll (e: Event) {\n    cancelAnimationFrame(scrollTimeout)\n    isScrolling.value = true\n    scrollTimeout = requestAnimationFrame(() => {\n      scrollTimeout = requestAnimationFrame(() => {\n        isScrolling.value = false\n      })\n    })\n  }\n  async function finishScrolling () {\n    await new Promise(resolve => requestAnimationFrame(resolve))\n    await new Promise(resolve => requestAnimationFrame(resolve))\n    await new Promise(resolve => requestAnimationFrame(resolve))\n    await new Promise<void>(resolve => {\n      if (isScrolling.value) {\n        const stop = watch(isScrolling, () => {\n          stop()\n          resolve()\n        })\n      } else resolve()\n    })\n  }\n  async function onListKeydown (e: KeyboardEvent) {\n    if (e.key === 'Tab') {\n      textFieldRef.value?.focus()\n    }\n\n    if (!['PageDown', 'PageUp', 'Home', 'End'].includes(e.key)) return\n    const el: HTMLElement = listRef.value?.$el\n    if (!el) return\n\n    if (e.key === 'Home' || e.key === 'End') {\n      el.scrollTo({\n        top: e.key === 'Home' ? 0 : el.scrollHeight,\n        behavior: 'smooth',\n      })\n    }\n\n    await finishScrolling()\n\n    const children = el.querySelectorAll(':scope > :not(.v-virtual-scroll__spacer)')\n\n    if (e.key === 'PageDown' || e.key === 'Home') {\n      const top = el.getBoundingClientRect().top\n      for (const child of children) {\n        if (child.getBoundingClientRect().top >= top) {\n          (child as HTMLElement).focus()\n          break\n        }\n      }\n    } else {\n      const bottom = el.getBoundingClientRect().bottom\n      for (const child of [...children].reverse()) {\n        if (child.getBoundingClientRect().bottom <= bottom) {\n          (child as HTMLElement).focus()\n          break\n        }\n      }\n    }\n  }\n\n  return { onListScroll, onListKeydown }\n}\n"],
  "mappings": "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",
  "names": ["VSelectionControlGroupSymbol", "Symbol", "for", "makeSelectionControlGroupProps", "propsFactory", "color", "String", "disabled", "type", "Boolean", "default", "defaultsTarget", "error", "id", "inline", "falseIcon", "IconValue", "trueIcon", "ripple", "multiple", "name", "readonly", "modelValue", "valueComparator", "Function", "deepEqual", "makeComponentProps", "makeDensityProps", "makeThemeProps", "makeVSelectionControlGroupProps", "VSelectionControlGroup", "genericComponent", "props", "emits", "val", "setup", "_ref", "slots", "useProxiedModel", "uid", "getUid", "computed", "value", "updateHandlers", "Set", "provide", "forceUpdate", "forEach", "fn", "onForceUpdate", "cb", "add", "onScopeDispose", "delete", "provideDefaults", "toRef", "density", "Array", "isArray", "useRender", "_createVNode", "class", "style", "undefined", "makeVSelectionControlProps", "propsFactory", "label", "String", "trueValue", "falseValue", "value", "makeComponentProps", "makeSelectionControlGroupProps", "useSelectionControl", "props", "group", "inject", "VSelectionControlGroupSymbol", "undefined", "densityClasses", "useDensity", "modelValue", "useProxiedModel", "computed", "isMultiple", "multiple", "Array", "isArray", "model", "get", "val", "some", "v", "valueComparator", "set", "readonly", "currentValue", "newVal", "wrapInArray", "filter", "item", "textColorClasses", "textColorStyles", "useTextColor", "error", "disabled", "color", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "icon", "trueIcon", "falseIcon", "VSelectionControl", "genericComponent", "name", "directives", "Ripple", "inheritAttrs", "emits", "setup", "_ref", "attrs", "slots", "uid", "getUid", "id", "isFocused", "shallowRef", "isFocusVisible", "input", "ref", "onForceUpdate", "checked", "onFocus", "e", "matchesSelector", "target", "onBlur", "onInput", "nextTick", "forceUpdate", "useRender", "for", "rootAttrs", "inputAttrs", "filterInputAttrs", "inputNode", "_createVNode", "_mergeProps", "type", "inline", "class", "style", "default", "_withDirectives", "_Fragment", "VIcon", "_resolveDirective", "ripple", "VLabel", "stopPropagation", "makeVCheckboxBtnProps", "propsFactory", "indeterminate", "Boolean", "indeterminateIcon", "type", "IconValue", "default", "makeVSelectionControlProps", "falseIcon", "trueIcon", "VCheckboxBtn", "genericComponent", "name", "props", "emits", "value", "val", "setup", "_ref", "slots", "useProxiedModel", "model", "onChange", "v", "computed", "useRender", "controlProps", "omit", "VSelectionControl", "filterProps", "_createVNode", "_mergeProps", "$event", "class", "style", "undefined", "makeVCheckboxProps", "propsFactory", "makeVInputProps", "omit", "makeVCheckboxBtnProps", "VCheckbox", "genericComponent", "name", "inheritAttrs", "props", "emits", "value", "focused", "setup", "_ref", "attrs", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "uid", "getUid", "id", "computed", "useRender", "rootAttrs", "controlAttrs", "filterInputAttrs", "inputProps", "_1", "VInput", "filterProps", "checkboxProps", "_2", "VCheckboxBtn", "_createVNode", "_mergeProps", "class", "$event", "style", "default", "_ref2", "messagesId", "isDisabled", "isReadonly", "VChipGroupSymbol", "Symbol", "for", "makeVChipGroupProps", "propsFactory", "column", "Boolean", "filter", "valueComparator", "type", "Function", "default", "deepEqual", "makeComponentProps", "makeGroupProps", "selectedClass", "makeTagProps", "makeThemeProps", "makeVariantProps", "variant", "VChipGroup", "genericComponent", "name", "props", "emits", "value", "setup", "_ref", "slots", "themeClasses", "provideTheme", "isSelected", "select", "next", "prev", "selected", "useGroup", "provideDefaults", "VChip", "color", "toRef", "disabled", "useRender", "_createVNode", "tag", "class", "style", "makeVChipProps", "propsFactory", "activeClass", "String", "appendAvatar", "appendIcon", "IconValue", "closable", "Boolean", "closeIcon", "type", "default", "closeLabel", "draggable", "filter", "filterIcon", "label", "link", "undefined", "pill", "prependAvatar", "prependIcon", "ripple", "Object", "text", "modelValue", "onClick", "EventProp", "onClickOnce", "makeBorderProps", "makeComponentProps", "makeDensityProps", "makeElevationProps", "makeGroupItemProps", "makeRoundedProps", "makeRouterProps", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "makeVariantProps", "variant", "VChip", "genericComponent", "name", "directives", "Ripple", "props", "emits", "e", "value", "val", "click", "setup", "_ref", "attrs", "emit", "slots", "t", "useLocale", "borderClasses", "useBorder", "colorClasses", "colorStyles", "variantClasses", "useVariant", "densityClasses", "useDensity", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "sizeClasses", "useSize", "themeClasses", "provideTheme", "isActive", "useProxiedModel", "group", "useGroupItem", "VChipGroupSymbol", "useLink", "isLink", "computed", "isClickable", "disabled", "closeProps", "stopPropagation", "navigate", "toggle", "onKeyDown", "key", "preventDefault", "Tag", "hasAppendMedia", "hasAppend", "append", "hasClose", "close", "hasFilter", "hasPrependMedia", "hasPrepend", "prepend", "hasColor", "isSelected", "_withDirectives", "_createVNode", "selectedClass", "class", "style", "href", "genOverlays", "VExpandXTransition", "VIcon", "VDefaultsProvider", "icon", "_vShow", "_Fragment", "VAvatar", "image", "start", "select", "end", "_mergeProps", "size", "_resolveDirective", "makeVVirtualScrollItemProps", "propsFactory", "renderless", "Boolean", "makeComponentProps", "VVirtualScrollItem", "genericComponent", "name", "inheritAttrs", "props", "emits", "height", "setup", "_ref", "attrs", "emit", "slots", "resizeRef", "contentRect", "useResizeObserver", "undefined", "watch", "value", "useRender", "_createVNode", "_Fragment", "default", "itemRef", "_mergeProps", "class", "style", "UP", "DOWN", "makeVirtualProps", "propsFactory", "itemHeight", "type", "Number", "String", "default", "useVirtual", "props", "items", "offset", "first", "shallowRef", "baseItemHeight", "computed", "get", "parseInt", "value", "set", "val", "containerRef", "ref", "resizeRef", "contentRect", "useResizeObserver", "watchEffect", "display", "useDisplay", "sizeMap", "Map", "sizes", "Array", "from", "length", "visibleItems", "height", "document", "documentElement", "Math", "ceil", "handleItemResize", "index", "max", "calculateOffset", "slice", "reduce", "acc", "calculateMidPointIndex", "scrollTop", "end", "middle", "middleOffset", "lastScrollTop", "handleScroll", "direction", "midPointIndex", "buffer", "round", "firstIndex", "lastIndex", "clamp", "scrollToIndex", "last", "min", "computedItems", "map", "item", "raw", "paddingTop", "paddingBottom", "watch", "createRange", "forEach", "indexOf", "delete", "makeVVirtualScrollProps", "propsFactory", "items", "type", "Array", "default", "renderless", "Boolean", "makeVirtualProps", "makeComponentProps", "makeDimensionProps", "VVirtualScroll", "genericComponent", "name", "props", "setup", "_ref", "slots", "vm", "getCurrentInstance", "dimensionStyles", "useDimension", "containerRef", "handleScroll", "handleItemResize", "scrollToIndex", "paddingTop", "paddingBottom", "computedItems", "useVirtual", "toRef", "useToggleScope", "onMounted", "value", "getScrollParent", "vnode", "el", "addEventListener", "onScopeDispose", "removeEventListener", "useRender", "children", "map", "item", "_createVNode", "VVirtualScrollItem", "index", "height", "slotProps", "raw", "_Fragment", "convertToUnit", "class", "style", "useScrolling", "listRef", "textFieldRef", "isScrolling", "shallowRef", "scrollTimeout", "onListScroll", "e", "cancelAnimationFrame", "value", "requestAnimationFrame", "finishScrolling", "Promise", "resolve", "stop", "watch", "onListKeydown", "key", "focus", "includes", "el", "$el", "scrollTo", "top", "scrollHeight", "behavior", "children", "querySelectorAll", "getBoundingClientRect", "child", "bottom", "reverse", "makeSelectProps", "propsFactory", "chips", "Boolean", "closableChips", "closeText", "type", "String", "default", "openText", "eager", "hideNoData", "hideSelected", "menu", "menuIcon", "IconValue", "menuProps", "Object", "multiple", "noDataText", "openOnClear", "itemColor", "makeItemsProps", "itemChildren", "makeVSelectProps", "omit", "makeVTextFieldProps", "modelValue", "role", "makeTransitionProps", "transition", "component", "VDialogTransition", "VSelect", "genericComponent", "name", "props", "emits", "focused", "val", "setup", "_ref", "slots", "t", "useLocale", "vTextFieldRef", "ref", "vMenuRef", "vVirtualScrollRef", "_menu", "useProxiedModel", "computed", "get", "value", "set", "v", "Î¨openChildren", "items", "transformIn", "transformOut", "useItems", "model", "wrapInArray", "transformed", "form", "useForm", "selectedValues", "map", "selection", "isFocused", "shallowRef", "label", "keyboardLookupPrefix", "keyboardLookupLastTime", "displayItems", "filter", "item", "some", "s", "menuDisabled", "length", "readonly", "isReadonly", "listRef", "onListScroll", "onListKeydown", "useScrolling", "onClear", "e", "onMousedownControl", "onKeydown", "key", "includes", "preventDefault", "focus", "KEYBOARD_LOOKUP_THRESHOLD", "checkPrintable", "isPrintableChar", "noModifier", "ctrlKey", "metaKey", "altKey", "now", "performance", "toLowerCase", "find", "title", "startsWith", "undefined", "select", "index", "findIndex", "valueComparator", "splice", "onBlur", "$el", "contains", "relatedTarget", "onAfterLeave", "onFocusin", "onModelUpdate", "matchesSelector", "watch", "IN_BROWSER", "window", "requestAnimationFrame", "scrollToIndex", "useRender", "hasChips", "chip", "hasList", "isDirty", "textFieldProps", "VTextField", "filterProps", "placeholder", "persistentPlaceholder", "_createVNode", "_mergeProps", "join", "$event", "externalValue", "class", "style", "_Fragment", "VMenu", "VList", "color", "VListItem", "VVirtualScroll", "_ref2", "itemRef", "itemProps", "mergeProps", "onClick", "prepend", "_ref3", "isSelected", "VCheckboxBtn", "prependIcon", "VIcon", "onChipClose", "stopPropagation", "slotProps", "onMousedown", "VChip", "disabled", "VDefaultsProvider", "closable", "size", "text", "_createTextVNode", "_len", "arguments", "args", "Array", "_key", "forwardRefs"]
}
